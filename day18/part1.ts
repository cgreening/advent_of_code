import { isExpressionStatement } from "typescript";
{
  function day18Part1() {
    const input = [
      "6 + (3 + 6 + 5 * 4) * (4 + 3) * 8 + 6 + 6",
      "7 + 6 + (9 + 4 * (8 + 7 * 8 + 2 * 7 * 9) * 9 + 5 + 3) + 6 + (7 + 5 + 7 * 9 + 9) * ((4 + 9 * 3 * 4 * 3) + 6 * 8)",
      "3 + (6 + 4 * (8 + 4 * 3 + 8) * 7 + 5 + 4) * 3 * 2 + 5 + 4",
      "2 * 4 + 4 + (5 * 9 + 3 + 9) * 6 * 2",
      "3 * 7 + 4 + 6 * ((8 * 9 * 2 * 9) + (9 + 3 * 6) + (3 + 4 * 8 + 2) * 2) * 2",
      "(9 * 2 * 7 * 5) * (6 + 3 * 3 * 3) + 5 + 9",
      "(7 * 2) + ((7 * 3 * 7 + 2) * 3)",
      "2 + ((4 * 8) + 6 * (3 + 5) * 4 * (6 * 7) * 4) * 8 + (7 * 5 * (8 * 3 * 8) * 5) + 6 * 2",
      "(2 * 4 + (4 * 2 * 2 + 3 + 8 * 5)) * (3 * 4 + 6 + 7 * 5) * 5 * 5 + 6 * 7",
      "4 * 8",
      "5 * (5 + (3 + 2 + 7 * 6)) + 4",
      "(8 * 2) * 8 * 9 * 7 + (9 * 6 * 6 + 4) + 2",
      "2 * (3 * 8 + (3 + 5) + 4) * 7 + 8 + 3",
      "6 * 2 * 5 * 9 * 4",
      "(5 + 5 + 5 * 2 + 3 + 8) * 5 * 2 + 9 + (8 + 8)",
      "5 + 6 + 3 * (2 * (4 + 9 + 7 * 8) * 9 + 4 + 8) * (5 * 7 * 9 * 5 * (3 + 2 * 6 * 4))",
      "3 + (2 * 4) + 8 * (3 + 5) + 9 * 8",
      "((4 * 7 + 5 * 2 * 3 + 9) + 4 + 6 * 9 + 6 + (6 + 9)) * 4",
      "2 + (2 + (2 * 6 * 3 + 2 * 6)) * 9 * 7 + (7 + 7 + 2) + 5",
      "7 + 4 * 4 * 4 * 8 * 7",
      "6 * (5 * (8 * 8 + 7) * (6 + 5 + 6 * 3 * 2) + 4) * 9 * 2 + 7",
      "(8 + 8 * (6 * 3 * 2 * 8 * 5) * (2 * 3 * 5 + 2 * 6)) + 5 + 4 * (4 * (7 * 9 + 8 * 6) * 7 * 9)",
      "9 * (2 + 7 + 3 + 7 * 9) + 3 + 6 + 7 + 4",
      "9 * 9 * (4 + 8 + (9 * 8 + 6 + 2 + 6 + 3) * 4 * 9 + 5)",
      "6 + 9 + 2 * ((6 + 9 + 5) + 8 + 6 + 5 + 5 + 6) + 7 * 8",
      "((3 * 2 * 5 + 3) + 8 + 7 + 9 + 2 * 8) * 9",
      "7 + 4 + 8 * 4 + 4 + (4 * (7 + 8 + 6 * 6 + 2) + (7 + 9 + 7 + 4) * 9 + 9 * 5)",
      "8 * 8 * (2 + 9 * 3 * 5) + ((4 * 5 + 3 + 8 * 6 + 3) * 5 + 2 * (6 + 8 + 6) + 4) * 2",
      "((3 + 4 * 2 * 9 * 2) + (8 * 3 + 7) * 7 + 6 + (4 * 7) * 5) + ((2 * 8 + 5 + 7 * 8 * 9) + 7 + 6 * 5)",
      "6 + 4",
      "2 + (6 * 9 + 8 + 2) * ((7 * 5) + 6 * 9 * 7 * 7) + 3 + 6",
      "((6 * 8 * 7 * 2 * 6) * 9 + 6 * (6 * 8) + 9) + 3 + 9",
      "9 + (8 * 9 * 9) + (4 + 8 * (2 + 9 + 4) + (3 + 9 * 4 * 5 * 8 * 3) * 9 + 2)",
      "3 * 2 * (3 + (4 + 3 + 3 * 5) * 4 + 3 * 8)",
      "2 * 5 + ((3 * 9 + 6 + 7) + (2 * 6 * 4 * 2 * 5 * 7)) * 5",
      "3 + 8 * 9 * ((3 + 4) + 2 + 9 * (4 * 4) + 3) + 3 + (5 + 3 + 5)",
      "(4 + 4 * 7 * (3 + 4) * 2) * 8 + (4 + 8 * 9 * 9 + 4) + 2",
      "(3 + 7 + 9 * 6 * (8 * 4 + 6 + 4 + 5 + 7) * (3 + 9)) + 3 + 2 * 4 + 7 + 8",
      "(3 * 4 * 9) * 2 + 4 + 6 + 2 * ((8 + 2 + 5) + 5)",
      "4 * ((3 + 9 * 2 + 4) + 6 * 9 + 6 * 5 * 3) * 9 + 7 * (9 * 9)",
      "(8 * 4 + 3) + 7 * 6 * 4 * 3 * ((6 + 5) * 6 * 2 * 6)",
      "5 * (7 * 5 * (7 + 2 + 6 * 5 + 8) + 3 * 2) * 2 + 3",
      "7 * 9 + (4 + 8 + 7) * 3 * (9 + (8 * 2 * 7 + 8 * 7 * 6) + 3 * 8 * 9)",
      "8 * 3 + (2 + 9 + 8 * 5) * 8 * 2 + (4 * 8 * 7 + 5)",
      "5 + 4 + (2 + 3) * 9 + (3 * 7 * 9 + 3) * 4",
      "4 + (8 * 8 * 5 * 4)",
      "9 * 9 + (5 + (9 * 5 * 2 * 5)) * 9",
      "(3 * (6 * 7 * 8) + 4 * 4 + (2 * 2 * 9 * 4)) * 7 * 4",
      "4 + (8 * (7 * 6 * 2 * 9) + 5 * (3 * 7 + 6 * 7) * 7 * 8) + (2 + 2 * 4 + (8 + 5 + 5 * 3 + 2 + 5) + (2 * 9))",
      "2 * 7 * (3 * 8 + 2 * 7) * 2 + 8 + 8",
      "3 + (2 * 8 + 2) + 9",
      "((6 * 3 * 4 * 9 * 7 * 4) + 2 + (7 * 6 * 3 + 6) * 9 + (5 + 3 + 5 + 7)) + 6 + 8 + 3",
      "4 * 6 + (9 + 6 * 4 * 9 + (5 + 3 + 5) + 4) * 2 + 8 + 9",
      "(7 + 2 * (4 * 5 + 5 * 3) * 8) * 4 * 2 + 7 + ((6 + 8 * 8 + 2 * 4 + 5) + (9 + 3))",
      "6 + 6 + 9 + 9 + (4 + (2 + 4 + 8 + 3 + 3) * 8 + 3 * 2) * 3",
      "5 * (4 + 4 + 4 * 7 * 4) + 7 * 4",
      "5 * ((5 * 8 * 9 + 2 + 8) * 6 + (5 + 3) * 4 + 8 + 3) * 8",
      "5 + (2 * 7 + 2 * 6 * 3) + (2 * 3 * (3 + 6 * 9)) * 4",
      "((4 + 6 * 3) + 6) * 6",
      "3 * 4 + (9 + (4 * 9 * 9 + 6 * 2) + 4 * 9 + 2) * 3",
      "7 * 9 * 9 + 7 * 3 + 9",
      "6 + 2 * 4 + ((9 + 5) + 4)",
      "(7 * 2 * 6) * 6 + (5 * 3) + ((7 * 4) + (2 * 8 + 6 + 9) * (7 + 4) + 8 + (2 + 7 + 6 * 3 * 7) * 3) * 3 + 2",
      "7 * (7 * 3) * 7 + (6 * 2 + (8 + 6 + 5 + 8 * 4 + 9) + 4 * 2)",
      "(6 + (9 * 4 * 9 + 9 * 7)) * (4 * 5 + 6 + 2 + 6 + 9) * 6",
      "((6 * 7 * 3) * 6 * 9) + (8 * 4 * 8) * 3 * 9 * 6",
      "5 * 6 * 6",
      "9 + (3 * 8 * (5 + 9 * 4)) * (5 * 2 + 4 * 6 * 3)",
      "(8 * 5 * 2) * (8 * 3) + 4 * 6",
      "((8 * 8 + 3 * 5 + 6) * 8 * 5) * 5",
      "(3 + 5 * 7 * (2 + 4 + 3) + (5 + 4 + 7 * 3 + 9) + 6) * 3",
      "7 + 2 * 7 + ((6 * 9) + 2 + 9 * 2 * 5) + 2 + 7",
      "5 * (5 + 8 * 3 + 9) * 4 * 9 * 2",
      "(9 * 3 * 3 * 9 + 5 * 9) + 8 * ((2 * 7 + 5 * 3) + 8 * 9 + (6 * 6 + 9) * 6) + (8 + 6 * 7 * 9)",
      "8 * ((2 * 4 + 6 * 6 + 9) + 7 * 4) * 6 + 5",
      "3 * 9 * 8 + (4 + (2 * 7 * 6) * 9) + 7 + 9",
      "2 * (6 + 5 * 7 * (8 + 8 * 9 + 9 + 3 * 8) + (6 * 6) * 4) + 5 * 7 + 3",
      "6 + 2 + (3 + 7 + 8 * 2)",
      "(9 + 2 + 6 * (9 * 9 * 7 * 5 * 6 + 6) + (2 * 2 * 5 * 7)) + 3 + 4",
      "2 + 8 * 5 + (5 + 4 + 7 * 3 * 6 * 9) * 5 * 9",
      "(4 * (2 * 6 * 8) * 9 * 9 + 6) * 8 * 9 + 6 * 4 + 5",
      "4 * 4 * 4 * 4 + 5",
      "(2 * 2 + 3 + 2 + 7 + 6) * (4 * 7 + (2 * 5))",
      "3 * 7 + 8 + 9 + 7 + 9",
      "((2 + 6) + 4) * (8 * 5 * 3 + (5 * 4 * 3 * 9) * (4 * 9 * 2 + 2 + 5 + 9) + 8) + 2",
      "5 + 6 * (3 + (3 + 8 + 5) + 7 + 6 + 5) + 9 + 9",
      "(9 + 3) + 3",
      "9 * (3 + 3 * (8 * 7) * 8) * (6 * 8) + 4 + ((4 * 2 + 6 + 5) + 8)",
      "(4 * (6 * 8 + 3 * 3 * 9 * 6) + 6) * 5 * 3",
      "6 + 4 + 4",
      "(5 * 9 + (6 + 2 + 6) + 5 + 2 + 9) + (6 * 8) + (2 * 5)",
      "(4 * (4 * 3 * 2 * 4) + 5 + 6) + 4 * 9 * (4 + (9 + 7) * 8) * 6 * 9",
      "4 * 3 + 5 * 2 * (2 * 8 * (6 + 8 * 7)) + 6",
      "7 + 4 * 8 * 4 * (6 * 5 * 2 + 8 * 7)",
      "8 * 2 * (7 + 6 + (4 * 7 + 8 * 5 * 2) + (3 * 7) * 8) * 8 * 4",
      "(7 * 9 + 4 * 2 + 6 * 7) + (8 + 7) * 9 * 9 * 6",
      "(6 * 8 + 5 + 9 * 2 * 3) * 4 * 4 * ((7 + 7) * 8 * 3 + (9 * 2 + 7) * 2 + 3)",
      "3 * ((2 + 8 + 9 * 4 * 5 * 4) * 5 + 8 + 8) + 5 + 5 * 2",
      "4 * 4 * (6 * 4 * (5 + 2 + 9 + 5 * 8)) * 6",
      "9 + 4 + (7 * 3 * 4 + 9) + (8 + 2 * 9 * (2 + 9 * 2 * 7 + 7)) + (5 + 4 + (9 + 8) * 4 + 7) * 6",
      "(3 + 5 + 4 + (2 * 3 + 7 + 2 + 2 + 5)) * (6 + 3 * 5 + (9 + 2 + 4 + 5)) + 7 * 8 * 6",
      "4 + 3 + ((2 + 9 * 3 * 5 + 9 + 7) + (3 + 3 * 8 + 2 + 6) * 4 + 5) * 8 + 6 + 2",
      "4 * 9",
      "5 + (2 + (5 * 6 * 3 + 9) * (8 + 7) + 9 + 4) * 4 + 2 + 3",
      "(6 + 6) + 8 + 4 * (3 * 9 * 7 * 9 * 8) * 4 * 8",
      "(5 + 7 + 8 + 5 * 4) + 4 * 6 + (2 * 4 + 8 + 9 + 2)",
      "(9 + 2 * (2 + 3) + 5 * 3) * 2",
      "7 + 9 + 3 + 3 + (4 * 9 + (6 * 5 + 8 * 9) + 7 + 4) * 4",
      "6 + (2 * (5 + 8 * 3 + 5 + 7 * 2) * 8) * ((2 + 9) * 6)",
      "7 * (3 + 2 + (9 + 9 + 7 + 5 * 7 * 9) + 4)",
      "(5 + 6) + 8 * 5 * 6",
      "8 + (2 + 7 + 4 + 6 + (5 * 7 + 6 + 2 * 5 * 6)) * 3 * 2",
      "(5 * 4 * 4) * ((8 * 3) + 7 * 6 * (7 * 6 * 3 + 8)) * 5 + (5 * 9 + 2 * (3 + 6 + 9 * 5 * 9 + 2) + 2 + 6)",
      "3 + 9 * 3 + 7 + 6",
      "((9 * 7 + 7) * 2 + 8) * 6",
      "(7 + 8 + (3 + 9) + 7 * 8 + 8) + 6",
      "(4 + 5 + 5 + 3 * 9) * 7 + 9 * 7 + 8 * 5",
      "8 * 5 * (8 * 6 * 2 + 4 * 3)",
      "2 + 2 * (6 + (4 + 5 * 7)) + (9 + (4 + 5 * 8 * 2) * 3 + 2)",
      "3 + 6 * ((9 + 9 * 7 * 5) + 7 * 5 * 8 * 4 + 6) * 3 + 2",
      "8 + ((5 * 5 + 3) + 9) + 4 + 8",
      "8 + (9 + (2 + 4 + 3 + 4) + (8 * 5 + 9 + 4)) * (4 * (3 * 7)) + 3 * 3",
      "9 + 4 + ((5 + 9) + 2) * 6 + ((3 + 9 + 7) * 3 + 2 * 6 + 9 * (7 + 9 + 3 + 3))",
      "6 * (8 + 5 * 3 * 8 + 3 * 2) * 5",
      "8 + 5 + ((7 + 2 * 3 + 7) * (9 * 5) * 3 + 2) * 3",
      "9 + 6 * 8 * ((4 * 5 * 4 * 8 + 8) + (9 + 9 * 7 + 6 * 5) + 6 * 6) * 2 + 3",
      "4 + 8 + (6 + 5 * 4 * 2 + 2 * 5) + ((2 * 9 + 8 + 7) + (4 * 5) + 6)",
      "((9 * 5 * 7 + 4 * 7) + (7 * 4 + 2 + 2) + 8 * 9 * 7 * 6) * (9 * (5 * 4 * 4 + 3)) + 8 * (5 + (5 + 8 + 7) * 4 * (9 + 8 + 6) * 3) * 2 * 6",
      "((3 + 6 + 6 + 4 + 5 * 6) + 5 * (5 * 7 + 9 * 4) + (4 + 2 * 6)) + 3 + (8 + 4 + 5 + 4 * 4 * 8) + (7 * 3 * 4)",
      "6 + (3 * 3 + 8 + 2) + ((6 + 7 * 3) + 9 + 7 * 3 * 4 * 4) * 6 * 6",
      "7 + (6 * 4 * 3 + 7 + 8 * 7) * 3 + 8",
      "8 * 9 * 6 + 9 * 3 * (8 * (8 * 5 + 5) + 4 * (5 + 5) + (9 + 2 + 2 * 5 + 3 + 5))",
      "9 + 2 * 2 + (4 * 2) + 7",
      "3 + 3 * (3 + 2 * 2 + 3) + (9 + 6 + (6 + 3 + 9) * 6 * 4 * (3 + 4 * 8 * 7 + 9 + 5)) + 9",
      "((2 * 8 + 8 * 4 * 3) + 4 + 7 + (5 * 5 + 8 + 6)) * 6 + 4 * ((4 * 3 * 8 + 2 * 9) * 4 * 8)",
      "(4 + 9 + (3 * 5 * 5)) + 4 + (3 * 4 + 4 + 2 + 6) + 7 * 5 + 8",
      "(2 * (2 + 3 + 2) + (3 * 8 + 6)) * 9 * 2 * 9 * 9 + 9",
      "5 * (9 + 4) * 4 + (3 + 7 + 9) + 5",
      "4 * 5 + (7 * 6 + 7 + 5) * (6 + 2) + 7 * 4",
      "3 * 6 + 3 + (6 + 7 * 2 * 4) + (9 + (7 + 8 + 7) * 6 * 9 + 6 * (6 * 8 * 8 + 5)) + 2",
      "5 * 2 + ((9 + 7 * 2) * (9 + 2 + 3 * 2) * 7)",
      "((4 + 8 + 2 + 3 + 6 * 3) * 8 + (7 * 9 * 5 + 3 * 2) * (7 * 7 * 9 * 2 * 5) * 3) + 8",
      "9 * 3 * (6 * 2 * 6 * 4 * (3 * 9) + 2) + 4",
      "2 * (6 * 9 + (9 * 2)) * 4",
      "9 + 7 + 7 * 7 * (7 + (9 * 9 * 2 + 4 + 9) * (3 + 4 + 2 + 9) + 6)",
      "4 * 6 + (3 * (2 * 5 + 4 * 3 + 4) + 6 + (5 + 9 * 7) * 9 + 3) * (3 * 3 * 7 * 7) * 8 + (5 * 6 + 4)",
      "4 + 7",
      "((7 + 5 * 8 + 6 * 3 * 9) * 3 + (5 * 9 * 3 * 2)) + (5 * 6 * 4 * 2) * 7 * 4 + 5 * 6",
      "(2 + 9 + 2 * 7) + 6 + 3 + 9 + 7",
      "((6 * 5 + 2) + 4 * 7 + 4 * (7 * 4 * 2 + 4) * 7) * 3 + 4",
      "5 + (2 * 3 + (9 * 8 * 9)) + 7 * (6 + 7 + 2)",
      "4 * 5 * 8 + 6 * ((4 * 7) * 8 * 8 + 7 * 8 + 2)",
      "8 + ((8 * 2 * 6) * 9 * (9 + 2 + 9 + 4 * 3 * 7) + 5) * 2 * 8 + 8",
      "((8 + 4 * 2 + 4) * 5 * 4 + 4 + 8 + 5) * 4 * 6 + 3 + 4 * 4",
      "6 + 7 * 6 + (6 + 6 + 2)",
      "((4 * 9 * 9 + 8) * 6 * 9 + 6) + 2 + 8 * 8 * ((4 * 9 + 6 * 7 + 5) * 4 * 7) * 7",
      "6 + 5 + (8 + (2 * 8 * 6 * 3) * 4) + (8 + 2) + 2",
      "(9 * 6) + 5 * 2 * (8 + 5 + 6 + 7) * 4",
      "9 + (8 * (2 * 4) + 6) * 8 * 4",
      "9 + 6 + (3 + 2 * 8)",
      "3 + 9 * 2 + 7 + 4",
      "((7 * 9 + 3 + 3) + 5 + (4 * 7 + 9 + 4 + 2)) * 3 + ((9 * 6 * 8 + 5 + 7) + 5 + (4 + 8) + 2 * 4) + 3 * 5",
      "6 * (9 + (4 * 7 + 9 * 7 * 6 + 9) + 6 + (4 + 7 + 3 * 4 * 6) + 4 + (5 + 2 * 5)) + ((8 + 7 * 3 + 6 * 4 * 7) * 3) + 5 + 9",
      "((7 + 5) + 9 + 8 * 5) * 6 + 3 * 7 + 2 * 3",
      "(9 + (5 + 8 * 9) * 9) + 3 + 6",
      "9 + 7 * 5 * 8 * (2 + 4)",
      "6 + 3 * 7 + (3 * 5 + 8 * 7 * (4 * 8 * 5 + 9 * 6 * 4)) * 3",
      "5 * (4 * 2 * 5 + 6 * 7 * (3 * 9 * 9 + 4 + 2)) + 9",
      "(5 * 7 + (8 * 4 * 4 * 4 + 5) + (9 + 9) * 5 * (3 + 6 + 7 * 9 + 6)) * 4 + 6 + 4 + ((7 * 4 + 7 + 2 + 7 + 2) * 5)",
      "(4 * 3 + 5) + 2",
      "(4 * 4 * (9 * 7)) + (4 * 5 * (3 + 9 * 3 * 2)) * (5 * 7 * 4 * 6)",
      "2 + 5 * (7 + 2 + 8 + (2 * 9) + 7 + 7) + 2 + 6",
      "((9 * 5 * 3 + 7 + 7 * 8) + (6 * 3 + 4 * 8) + 4 * 9 + 9) + 9",
      "8 + 2 * (9 + (7 * 7 * 3) + 2) + (6 + 5 * (3 + 6 * 9) * 6 + 3)",
      "((4 + 8 * 6 * 9 * 2 + 3) + 8 * (7 * 7 * 8 * 6) + 9) * (2 + 6 * 9) + 6 + 4",
      "6 * 5 + 8 * 7 * (3 + 4 * 7)",
      "7 * 5 * (5 * 7 + (2 * 7 * 6) + (6 * 3) * 9 + (4 * 7 * 6 + 7 * 7 * 3))",
      "8 + 7 * 3 + (4 + 6 * (4 * 4 + 9 * 7) * 6 + 8 * 2) * 8 * (8 * 3 + 3 + 6)",
      "2 + 6 + ((6 + 2 * 3 + 2 + 2 + 6) + 3 + 5 + 7)",
      "((9 * 7) + 8 * (9 * 3 * 9 + 8) * 2 + 7 * (6 + 7 + 4 + 6 * 3)) + 7 * 4 + 7",
      "5 + ((8 + 6) * 7 * 9 + (4 * 5 + 5) * (5 + 3) * 7) + 3",
      "4 + ((5 + 4 * 5) + 2 * 6 + 5)",
      "6 + 6 * 8 + (3 * 8 * 2 * (5 + 3)) + 6 + ((3 * 7) + 9 + 7 + 7 + 6 * 7)",
      "(2 * (4 * 7) + 6 + 8 * 3 + 7) + 8 * 6 * (3 + (3 + 4) * 2 * 3 * (4 * 5 * 2 * 2 * 6)) * 8 * 4",
      "6 + (8 * 3 + (3 + 9 * 6)) + 2 * 4",
      "3 * (2 * 9 * 3 + 3) * 5 * 6",
      "6 * 5 * 3 * 3 * (6 + 7 + 9 + 8)",
      "9 + 2 * 8 * 6 + ((9 * 9) + (3 * 4 + 4 + 4 * 9 * 7) + 5 + 4 + 9 + 9)",
      "3 + 9 * 5 * 8 * 5",
      "5 + 3 * 7 + 9",
      "9 * ((4 + 4 * 6 + 5) + 3) * (4 + 3)",
      "(3 * 6 * (8 * 6 * 5) + 2 * 3 + 4) + 6 + 8",
      "6 + (4 * 8) * 3 + 5 + 2",
      "2 + (2 * (7 + 6) * (5 + 3 + 2) * 2 + (7 * 9)) * ((5 + 9 + 2 * 8 + 8) + 9 + 8) + 9 + 6",
      "((5 * 8 * 4) * 6) + 4 * 4",
      "6 * 2 * (3 + 4 + 3) * (5 * 4 * 7) * (2 + 4 * 2 + 8)",
      "6 + 9 * (2 * 7 + (4 * 5 + 7 * 6 + 7 + 8) + 4 + 5)",
      "((4 + 6 * 2 * 4) + 2 + 4 * 3) * 9 * 5 * 9",
      "6 + (3 + (5 + 4 * 2 * 3) + 6) + ((8 + 4 * 8 * 5 * 4 * 4) + 5 * (6 * 6 * 9 * 9) * 3 + 3)",
      "7 * 8 * (7 + 8 * 2 + 6) * 9",
      "5 + 3 + 4",
      "4 + (3 * 6)",
      "9 * (2 * 6 * 2 + 4 * 5 + (2 + 4 + 6 + 3 * 4 * 5)) * 4 * (8 * 7 * 6)",
      "6 * (9 * 5 * 9 * 4 + 4)",
      "(8 * 7 + 8 * 9 + 2) + 4",
      "6 + (7 * 6 + 8 + 2 * 3 * 8) * 8 + 4 * 2",
      "((4 * 8 * 7 + 8) * 9) + (9 + 5) + 4 + 2",
      "4 + 9 + (5 + 3) + 4 * (9 * (4 * 7 * 5 * 2) * 8) * 3",
      "5 + 3 * 5 + 6 * 7 + (2 + 7 + (7 + 7 + 9 + 2 * 4 * 6) * 6 * 8 * 8)",
      "(6 * 4 * 8) * 9 + 7 + 2",
      "3 * (5 + 5 + 2 + 6 + 3) + 5",
      "((2 + 6) + 3) * 7 + 3 * 8 + 2 * (7 + 4 * 4)",
      "4 * 6 * 8 + (7 * 2 * (5 * 7) * 3 * (2 * 4 + 6 * 4 * 2)) + 2 + 9",
      "7 + (9 * 4 * 5 * 8) * (4 * 2 + 7 * 2 * 3 * 7) * 3 * 2 * 9",
      "4 + 6 * 8 * 4 * (2 * 8) + 4",
      "4 * (8 + (9 + 3) * 4) + 2",
      "(6 + 7 * 5 + (8 * 4 * 5 + 7 + 8 * 8) + 9) + (4 + (6 * 8 * 6 * 3 + 9) + 4 + 2) + ((9 + 4 + 8 * 7 * 9 + 2) * 2 + 2 * 2 * (2 * 6 + 9)) + 6",
      "8 + ((5 * 5 + 3 + 2 + 5 * 6) * 6 * (2 + 9 + 8) + 5 + (7 + 6 + 4) + 9)",
      "(4 * 5 * 9 + 8 + 8 * 5) * 2 * (7 * 9 * 3 + 3) + (2 + 5 * 5 * 3 + 4) + 5 + 7",
      "(2 + 8 + (5 + 7 + 2 * 9)) * ((8 + 6 + 8 * 2 * 3 + 4) * 3) * 2 * 9",
      "((2 + 7 + 6) + 2 * (3 + 6 * 6 * 5 * 2 * 7) * 3 + 8) + 3 + 7 * 6",
      "5 * 5 + 7 + 3 + 6 * 2",
      "4 + 9 * (9 + 6 + 6) * 7 * 9 * 8",
      "((8 + 5 * 8 * 4) * 5) * (8 * 7 * (4 + 5 + 4 + 3 * 3))",
      "(9 * (8 * 9 + 9 * 6 + 5 * 8) + 3 * 9 * (5 + 6 + 6 * 4 * 4 * 6)) + 4 * 6 + 8",
      "6 + (9 * 8 * (8 * 3 * 3 * 7))",
      "(7 + 7 + 6 + 8 * 3 + 9) * 4 + 9",
      "7 + 2 + 3 + (8 + 5 + (7 * 7 + 8) * 9 + 7) * (2 + 5 * (4 * 8 + 2 * 5 * 7) * 3 * 9)",
      "((3 + 7 + 4 + 9) + 5 + 6 * 3 + 3 * 8) * 2 * ((9 + 5 * 9 * 5) * 3 + (3 * 5 * 7 * 2)) * 9 * 5",
      "6 + 4 * 9 + (3 + (5 * 3 + 5) * (3 * 8 * 2 * 5)) + (4 + 9 * 4 * 8 * 7 * 4) + 2",
      "9 + (6 * 8 * 4 * (7 + 4 * 5 * 3 + 5 * 5) + (2 * 7 * 7 * 8))",
      "(8 + (9 + 8 * 6 + 2) * 7 * (6 + 2 * 6 + 6 + 4 + 7) * 9) * 5 + 3",
      "4 * 4 * (2 + 8 + (4 + 5 * 4)) * (6 * (2 * 3 + 7) * 7 + 9 + 8) + 3 * 3",
      "4 * ((9 + 7) * (7 + 2 + 5 + 2 * 4 * 2) * (3 * 7 * 6 + 5 + 9 + 2) * (6 + 9 * 2 * 5 * 8 + 6) + 5 + 8)",
      "(6 * 5 + 9 + 6) + 2",
      "2 + 2 * 5 * (3 * 9 + 2 * (6 * 5)) * 8 + (7 + 6)",
      "2 + (2 + 5 * 9 + (5 + 3 + 8 * 2 + 2) * 4) * (8 * 2 * 2 + 3 + 5 + 8) * 4 + 3",
      "4 * 9 + (7 * 6 + 2 * (6 + 2 + 9) + 2 * 3)",
      "(5 * 2) * (4 + (9 * 9 + 9) * 9 + 6 + 6) * (6 * 8 * 7 + 7) + 9 + 3 + 2",
      "(4 + 2 * 2 * 8 + (3 + 7) * 7) * 8 * 9",
      "(3 + (8 * 2 + 6) + 5) * 9",
      "2 + 2 * 4 + (7 + 3 * 9) * 5 * 6",
      "7 + (4 + 8 * (3 * 7 * 3 + 9) * 9) + 2 * (4 + 8) + 5",
      "2 * 5 + (4 * 9) * 7 + 5",
      "7 * 3 * (8 + 2 * (9 * 6) * 8 + 6 * 9) * 9",
      "9 * (9 + 6 * 2 * (9 + 4 + 8) + 4 * (5 * 8 * 4 + 6 * 6 * 9))",
      "3 + 7 + ((9 * 6 + 2 * 9 + 6) + 3 + 2)",
      "(3 + (7 + 4 * 3 + 6 + 7) + (5 * 3) * 8 + 7 + 5) * 2",
      "(8 * 5) * 8 * 3",
      "9 * 2 + 9 * 9 * ((3 + 8 + 6 + 5) + 5 + 2 * 2) * 2",
      "(5 * 4 + (7 * 8 * 2 * 5 * 5 + 2) * 3) * 2 * 7 * (7 * (4 * 8 + 8 + 4 * 6))",
      "7 + 3 * (8 + 7 + 2 + 4 + (2 * 7 + 3 + 9) * 5)",
      "4 + 5 + 4 + 5",
      "8 + 6 * (3 + 8 * 2 * 7 * 9 + 4) + 8",
      "(9 * 3 * 9 * (3 + 2 + 7 + 5)) + 4",
      "4 + 4 + (4 * 4) + 3",
      "6 + 3 * (3 + 3) + 7 * 2 + (8 * 8 + 7 + 8 + 4 * 4)",
      "4 + 9 * 6 + (2 * 9) * 3 + 6",
      "4 + 8 + 8 + 2 * ((2 * 7 * 7 + 8 + 4 * 3) * 3 + 8 * 9 * 4)",
      "(2 * 6 + 7 + (2 * 4 * 5 * 2 * 6) + 7 + (6 * 3 + 3 + 7 * 8)) * 8 + 3 * 8",
      "3 * 7 * 3 * 5",
      "((4 * 9 * 5 + 3 + 4) * 4) * 7 + 3 + 5",
      "9 * (2 + 5) + 2",
      "3 * 3 * (8 * 7 + (2 * 9 + 4 + 2 * 9 * 6) + 9) * 2 + 5 + (5 * 8)",
      "7 + ((3 + 2) * 5 + 6 * 3 + 4 + 5) + (4 * 5 * 9 * 7) + 4",
      "4 + 4 + 7 + 7 * (3 * 9 + 2 + 4 + 2 * 6) + (6 + 8 * 6 + 9)",
      "4 * 2 * (4 * 3 * (7 + 2 * 6)) * (6 * (2 + 5 + 7) + 8) + 2",
      "(3 + 7) * (9 * 7 + 8 + 2) * (8 * 9 + (7 * 7 + 6 * 2 * 6) + (7 + 7 * 6)) + 9 * 7 + 2",
      "5 + 9 * ((9 * 2 + 5 + 8) + 7 * 7 + 5) + ((3 + 2 * 8 + 8 * 6 + 8) + 4 * 2 * 3 + 9) + (3 * 2 + (6 * 3 + 3 + 6 * 5 * 7) + (2 * 3 * 5 * 9))",
      "(8 * 9 + 9 + 3 + 3 * 6) * 8 * 8 * 4",
      "(3 + 4 + 6) + 8 + 4",
      "(4 + 2 + (6 + 2 + 4)) + 7 + 2",
      "(3 * 3 + 5 + 5 * 2) + 9 * ((5 * 9) + (9 + 7 + 2 * 9 + 4 * 9) + 3) * ((3 * 2 + 3 * 7 * 6) * (7 * 3 * 4 * 6 + 3)) + 6",
      "2 * (2 + 9 * 7) + 2 * 8 * 4 * 7",
      "2 + 6 * (2 * 9 + (4 + 2 + 4 * 5 + 6 + 6) + (5 * 5 * 8) + (8 + 3 + 7 * 8)) * 5 + 9",
      "(8 + 3 + (6 + 7 + 4 * 9 * 9 + 3)) * 8 * 2 + (5 * 6 + 6 + 6 * 5 + 4)",
      "(5 * 5 + 2 * 8 * 5) + (8 * 5 * (9 * 3 * 8 * 9)) * 6 + 5 + 4 + 4",
      "8 + 4 + (2 * 2 * (8 + 2 * 8 + 2 * 9)) + 6 + 3",
      "3 * 9 * (8 + (7 + 3 + 4 + 5 * 7) + (7 * 5 + 9)) * ((6 * 7 * 6 + 8 + 5) * 6 + (7 + 4) * 5 + (6 + 6 + 3 + 8 + 5) + 2) + ((2 * 7 + 9 * 5 + 3) * (8 * 6 * 2 * 3) + 6 * 9 + 4 + 5) + (6 * 5)",
      "4 + 4 * 2 + (9 + 3 * (5 * 6 * 4 * 5 + 4))",
      "6 + 2 * 6 + 7 + 9 * (8 * 4)",
      "(3 + (5 + 4 * 4 + 8 + 4 + 5) + 8 + 8 + 3 * 8) + 9",
      "3 * (7 + 4 * (7 + 2 + 6)) * 5",
      "6 * (5 * 3 * (7 * 3 * 7 + 9 * 5 * 8))",
      "4 + 7 * 6 + 5 + 6 * 7",
      "(7 + 9 * (4 * 3 + 2 + 3 * 4 * 6) * 2) * 6 * (5 + 8)",
      "3 + ((9 * 6 + 6 * 4) + (9 * 9 + 9 + 7 * 3) + 3 * 8) * 7",
      "(9 * 2 + 2) * (3 + 9 * 3 * 5 * 7)",
      "5 + 2 + 9 + (6 * (6 + 4 * 4 + 9) + (8 * 4 + 5 * 3 * 9)) + 9 * 5",
      "8 + (4 + 9 * (7 + 3 * 6 * 5 + 9 + 7) + (3 * 6)) + 5 * 6 + 6",
      "(7 * (8 + 3 * 3 + 7)) * 9 * (6 + 9) + 3",
      "5 * ((6 + 7 + 9 + 3 * 2 + 3) + (3 + 5 * 5 + 3 + 9)) + 3 * 7 + 6 + (7 + 4 + (3 * 3) * 5)",
      "8 + 6 + ((9 + 8 + 3 * 6 * 9) * 3) * 8 + 7 * 9",
      "7 + (8 + 3 * 6 * 8 * 8 * 3) * 5 * ((3 * 6 * 2 * 7 * 7 + 4) * 5)",
      "(2 + 2 * (3 + 6) * (8 + 5) + (8 * 6 + 7) * 9) + 6 + 8 * 9",
      "7 + 7 + (4 + 2 + 4 + 6 * 5 + (8 * 6)) * 9",
      "7 * 3 + 7 + ((9 + 7) + 6 * (5 + 9 * 8 + 6 + 5 * 4) * 8 * 3 + 3)",
      "(2 + (2 + 9 + 2)) + 2 + 8",
      "2 + 2 * (5 * (8 * 4 * 7 + 3 * 5) + 6) * ((9 + 3 * 2 + 5 + 8) * 2 * 9 + 2) * (3 + 9 + 4 * 5)",
      "7 * 8 * 2 * 8 * 9 + (4 + (5 * 6 * 8 * 9 + 7))",
      "6 + 2 + 7 * (6 + 7 + 6 * 8 + 9) * 3",
      "6 + 6 * 7 * (4 * 9 * 9 + 7 + 4 + 9) + 9",
      "(9 * 9 + 6 * 6 + 3) * 3 * 2 + (3 * 8 + 8 + 4)",
      "9 + 6 + (9 + 3 + (7 + 5 + 2 + 3))",
      "5 * 4 + (2 + 2)",
      "((7 + 7 * 6 + 2) + 7) + 8 * 7",
      "6 + (5 * 2) * 9 + 8 + 7 + 8",
      "9 * 8 + 3 * (4 + 8 + 8 + 5 + 9)",
      "4 * (2 * 8 + 8 + (5 + 5 * 3 * 5 + 2) + 9 * (8 * 6 + 2 + 2)) + 9 * (6 + 6 * 3 + 8) * 4 + 7",
      "(3 * 6 + (4 * 9 * 2 * 4 * 8)) + (3 * 5 + 7) + ((9 * 5 + 5 * 2) + 9 + 8 * 7 + 3)",
      "5 + (3 + 9 + 6 + 2 + (6 + 4 * 2))",
      "(9 * 5 * (9 * 9) + 8 * 7) + 2 * 7 * 3 + 3",
      "(9 * 5 + 6 * 7 + 4) * ((3 * 2 * 9 * 4 + 4 + 6) + 2 * 4 + 4 + 9 * 7) * 2 + (8 + 8 * 6 * 8)",
      "6 + ((5 * 9) * 4 * 5 + (4 * 3 * 7) * (5 + 3 * 3 * 8 + 4 * 4)) + (5 + (6 + 3) * 2 + 8 * 2 + 3) + 3 * 3",
      "8 + (3 * 8 + 5 + 6 + (3 + 4) + 8) * 2",
      "9 + 2",
      "(8 + 2) * 2 * 2 + ((9 * 9 * 4 * 5 * 5 * 3) * 2) + (4 * 3 * 8 + 9 + (8 * 3 * 7 + 4 * 8 * 5))",
      "6 * 7 + (8 * 5 * 8 * 7 + 7) * 9 + 3 * 7",
      "3 * 5 * 7 + 8",
      "(3 + 2 + (8 + 9 * 9 + 6 * 8 + 6) * 3 * 6 + 6) + 4",
      "3 + 8 + 4 * (4 + 7) * (5 + (3 + 9 + 6) * 7)",
      "((4 + 5 * 8 * 5) * 8 * 5) * (2 * 4 * 9 * 4) * 6",
      "(8 + 3 * 5) * 2 + 2 * 4 * 8 * 6",
      "8 * 7 * (4 * 7 + (4 * 3 * 4 + 3 * 7) + 2 * (6 * 6 + 6 + 4 + 7 + 2))",
      "6 + 9 * 5 + 4",
      "5 * 6 * 8 * ((6 + 9 * 2 * 8 + 5 + 8) + 3 + 6)",
      "4 * ((4 + 7 * 9 + 9 + 3) * (2 * 4) * 6 + (5 + 9 + 7) + 5) * (8 + 2 + 8 * 5 + (6 + 7 * 7 * 6)) * 2 + (7 * 8)",
      "(7 * 3 + 4 * (9 + 2 + 6 + 6 * 4 + 2) * 4) * 6 * 2 * 2",
      "3 * (4 * 8 * 3 + 8 * 6 * 2)",
      "(3 * 3 + 8 * 4 * 4 + (6 + 3)) * 2 * 7 + 5 + 2 * 4",
      "9 * 3 * (4 * 7 * 9 * (2 * 4 + 9 * 2) * 2) * 7",
      "5 + (4 * (6 + 5 * 9 + 6 * 7 * 3) + (7 + 2 + 2 * 9 + 2 + 2) * 3) * 4 * 6 + 2",
      "7 * (6 * 6 * 7 * 2 + 8 + 8) + 7 + 8 + 7 * (9 + 3 + 4 * 4 + 4 * 8)",
      "8 + 2 * (4 + (2 * 3 * 8 * 4 * 3))",
      "6 * (6 * 4 + (5 * 7 * 8 * 2 + 4 * 9) * 2) * 9 + 3 + (3 + 7 * 5 + 3)",
      "3 * 7 * 5",
      "7 + (2 * 5 + 5)",
      "6 * (5 * 9 + 5) * (8 + 7) * ((8 * 8 + 4 + 5) * (2 * 2 * 7 + 4 + 2) + 5) * 3 * 3",
      "4 * 2 * 2 + ((4 * 7 * 8 + 9 + 2) + 6 * 4 + 3) * (4 + 3 + 3 * 9 * (8 + 6 * 8 + 3 + 9) * 3) * 8",
      "8 * 9 * 8 + (9 * 7 * 2 + 7) + 4 * (6 + (8 + 3 + 5) * 5 * 3 + 6 * 9)",
      "((4 + 4 + 5 * 8 + 9 * 4) * 8 * 9 + 6 * 9 * 8) + 4 + ((9 * 2 * 7 + 5 + 3 + 6) + 3 * 4) * 8",
      "4 * (3 + 4 + 8 * 6 + 8 * 7) + 3 * 9 * 8 * 8",
      "(4 + 8) + ((7 + 3 * 9) * 5 * 8 * 4)",
      "3 * 9 + ((5 + 4 + 8 + 9) + 5 + 5 + 8 + 5)",
      "8 * (9 * 3 * (9 * 8 + 6 + 3) * 8 + 6)",
      "(5 + (3 * 7 + 6 + 9 * 7) + 8) + 2 * 3 * 7 + 2",
      "8 + 3 + 8 + ((3 + 6 + 8 + 2) + (4 * 9 * 7 + 5) + 6 * 2)",
      "(7 + 5 + 6 + (6 * 9 + 8 + 8 + 2 + 5) * 4 * (9 * 4 * 8)) + (8 + 5 * 3 * (2 + 8) + 7) + 8",
      "2 + (3 + (6 + 9 + 9 * 5 + 2) + 9)",
      "((4 * 9 + 4 + 7) + 6) * 5",
      "2 * 3 + (7 + 5 + 9 + (9 + 9 + 8 + 5 * 8 * 7))",
      "7 * (4 + 4 * 7) * 4 + 2",
      "3 * (4 * 6) * 2 + 4",
      "2 * ((5 * 8 * 8 * 4) + 8 * 6 * 3 * 3)",
      "6 + (2 * (8 + 4) * 3 + 8 * 4) + ((3 * 9 + 6 * 4 * 8 + 3) + 9 * 9 + 3 + 3 + 2) * 4 + 6",
      "3 + 6 * 6 + (6 + 9 + 7 + 2) + 9",
      "(5 * 5 * (2 + 2 + 9 + 8)) + 7",
      "(5 * 7 * 6 + 9) * (6 + 4 + 9 + 6 * (8 * 2 * 2 + 5 * 9) + 6)",
      "9 * 7 + (2 * 2 * 8 + 9 * 7 * (8 + 4 * 8 + 4)) + (8 + 6 + 6)",
      "6 + ((3 + 9 * 4 + 7) * 3 * 8 + 4 + (3 + 3 * 6 + 6 + 8 * 5)) * 8 * 8 * 3 + 3",
      "5 + 3 + 6 + (2 + 3 * 9 + 2 * 8 * 8) + (6 * 6 * 5 * 6 + 6)",
      "(6 + 2 * 8 * 6 * 7) * 6 + 6 + 6",
      "(3 + (6 + 9 + 3 + 3 * 4) * 8 + 6 + 7 * 8) + (2 + 8 + 9 * 9 * 7) + 4",
      "2 + 7 + 2 + 3 + ((4 * 5 + 4 * 3 * 3 + 7) * 4 + 8 + 9 + (2 + 7 + 2 * 5 + 3) + 9) * 6",
      "(7 * (6 * 5 + 2 * 6 * 2)) + 9 + 6 + ((8 + 4) * 5 * 3 + 5 * 8) * ((5 * 5) + (8 + 4 * 5) * 8 + 4 + 2)",
      "((4 * 6 + 2 * 5 + 8) * 9 * 3) + 3 + 5 + 3",
      "5 * 5 + (2 * 9 * 9 * 6) + 3 * 8",
      "3 + 7 * 2",
      "9 * (5 + 6 + 2 + (8 * 8 + 9 + 8 + 4 * 6))",
      "(9 + 2 * 7 * 2 + 5) + (4 + 6 * 3) + ((6 * 4 + 4 * 2 + 5) + 8 + 6 * 6)",
      "3 + (7 * (2 + 5 * 5 * 4 * 4 + 7) * 4 * 4)",
      "8 + 3 * ((3 * 7 * 3 + 4 * 5) * (6 + 8 + 9 * 7 + 6) * 9 + 5 * (5 + 4 + 4 + 4))",
    ];

    function evaluateExpression(expr: string) {
      interface Expression {
        evaluate(): number;
        dump(): string;
      }

      class NumberExpression implements Expression {
        value: number;
        constructor(value: number) {
          this.value = value;
        }
        evaluate() {
          return this.value;
        }
        dump() {
          return `${this.value}`;
        }
      }

      class BinaryExpression implements Expression {
        operator: string;
        left: Expression;
        right: Expression;
        constructor(operator: string, left: Expression, right: Expression) {
          this.operator = operator;
          this.left = left;
          this.right = right;
        }
        evaluate() {
          if (this.operator === "+") {
            return this.left.evaluate() + this.right.evaluate();
          } else {
            return this.left.evaluate() * this.right.evaluate();
          }
        }
        dump() {
          return `(${this.left.dump()} ${this.operator} ${this.right.dump()})`;
        }
      }

      function tokenize(expression: string): string[] {
        expression = expression.replace(/\(/g, "( ");
        expression = expression.replace(/\)/g, " )");
        return expression.split(" ");
      }

      function getExpression(tokens: string[]): Expression {
        let leftExpression: Expression | null = null;
        while (tokens.length > 0) {
          const token = tokens.shift()!;
          if (token === "(") {
            leftExpression = getExpression(tokens);
          } else if (token === ")") {
            return leftExpression!;
          } else if (token === "+" || token === "*") {
            const rightToken = tokens.shift()!;
            // handle start of the new expression on the right hand side
            const rightExpression =
              rightToken == "("
                ? getExpression(tokens)
                : new NumberExpression(parseInt(rightToken, 10));
            leftExpression = new BinaryExpression(
              token,
              leftExpression!,
              rightExpression
            );
          } else {
            leftExpression = new NumberExpression(parseInt(token, 10));
          }
        }
        if (leftExpression == null) {
          throw new Error("Did not parse");
        }
        return leftExpression;
      }

      const expression = getExpression(tokenize(expr));
      console.log("Parsed:", expression.dump());
      return expression.evaluate();
    }

    const result = input.reduce(
      (total, expr) => total + evaluateExpression(expr),
      0
    );
    console.log(result);
    // const result = evaluateExpression(
    //   "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"
    // );
    // console.log(result);
  }

  day18Part1();

  /*
2 * 3 + (4 * 5)

I see a 2, create a numeric expression
I see a *, create mul expression with 2 on left and new expression on right
  I see a 3, create a numeric expression
  I see a +, create an add expression with 3 on left and new expression on right
    I see a bracket, start new parse with string containing bracketed expression
*/
}
